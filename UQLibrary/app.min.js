'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : new P(function (resolve) {
                resolve(result.value);
            }).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments)).next());
    });
};

var LibDataFilters = function LibDataFilters() {
    _classCallCheck(this, LibDataFilters);
};

LibDataFilters.fieldsFilter = function (data, fields, keyword) {
    if (!data || !Array.isArray(data)) return [];
    if (!fields || !Array.isArray(fields)) return data;
    if (!keyword || typeof keyword != 'string' || keyword == '') return data;
    keyword = keyword.toLowerCase();
    return data.filter(function (item) {
        return fields.some(function (field) {
            return item[field] && typeof item[field] == 'string' && item[field].toLowerCase().indexOf(keyword) > -1;
        });
    });
};

LibDataFilters.hasKeys = function (data) {
    var count = 0;
    if (data && (typeof data === 'undefined' ? 'undefined' : _typeof(data)) == 'object') {
        for (var key in data) {
            count += 1;
        }
    }
    return count > 0;
};

var LibraryDataClient = function () {
    function LibraryDataClient(service) {
        _classCallCheck(this, LibraryDataClient);

        this.service = service;
    }

    _createClass(LibraryDataClient, [{
        key: 'createLibrary',
        value: function createLibrary(library) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                    while (1) {
                        switch (_context.prev = _context.next) {
                            case 0:
                                _context.next = 2;
                                return this.service.post('createlib.cgi.js', JSON.stringify(library));

                            case 2:
                                _context.t0 = _context.sent.data;
                                return _context.abrupt('return', Boolean(_context.t0));

                            case 4:
                            case 'end':
                                return _context.stop();
                        }
                    }
                }, _callee, this);
            }));
        }
    }, {
        key: 'library_hours_day',
        value: function library_hours_day() {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee2() {
                var arg;
                return regeneratorRuntime.wrap(function _callee2$(_context2) {
                    while (1) {
                        switch (_context2.prev = _context2.next) {
                            case 0:
                                _context2.next = 2;
                                return this.service.get('https://app.library.uq.edu.au/api/v2/library_hours/day');

                            case 2:
                                arg = _context2.sent;
                                return _context2.abrupt('return', arg.data);

                            case 4:
                            case 'end':
                                return _context2.stop();
                        }
                    }
                }, _callee2, this);
            }));
        }
    }, {
        key: 'library_hours_week',
        value: function library_hours_week() {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee3() {
                var arg;
                return regeneratorRuntime.wrap(function _callee3$(_context3) {
                    while (1) {
                        switch (_context3.prev = _context3.next) {
                            case 0:
                                _context3.next = 2;
                                return this.service.get('https://app.library.uq.edu.au/api/v2/library_hours/week');

                            case 2:
                                arg = _context3.sent;
                                return _context3.abrupt('return', arg.data);

                            case 4:
                            case 'end':
                                return _context3.stop();
                        }
                    }
                }, _callee3, this);
            }));
        }
    }, {
        key: 'computer_availability',
        value: function computer_availability() {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee4() {
                var arg, data;
                return regeneratorRuntime.wrap(function _callee4$(_context4) {
                    while (1) {
                        switch (_context4.prev = _context4.next) {
                            case 0:
                                _context4.next = 2;
                                return this.service.get('https://app.library.uq.edu.au/api/computer_availability');

                            case 2:
                                arg = _context4.sent;
                                data = arg.data;
                                return _context4.abrupt('return', data);

                            case 5:
                            case 'end':
                                return _context4.stop();
                        }
                    }
                }, _callee4, this);
            }));
        }
    }, {
        key: 'getData',
        value: function getData() {
            var _this = this;

            return new Promise(function (resolve, reject) {
                var result = { libraries: [], computers: [] };

                var count = 3;
                var librariesByDay = void 0;
                var librariesByWeek = void 0;
                var computers = void 0;
                function calculate() {
                    computers.forEach(function (item) {
                        if (LibraryDataClient.ComputerLibraryMappings[item.library]) item.mappedName = LibraryDataClient.ComputerLibraryMappings[item.library];
                        var total = 0;
                        var available = 0;
                        var numberOfRooms = 0;
                        item.roomAvailabilities = [];
                        for (var key in item.availability) {
                            var room = item.availability[key];
                            var availableInRoom = room.Available;
                            var occupiedInRoom = room.Occupied;
                            if (NumberUtil.isValidInteger(availableInRoom) && NumberUtil.isValidInteger(occupiedInRoom)) {
                                total += availableInRoom + occupiedInRoom;
                                available += availableInRoom;
                            }
                            numberOfRooms += 1;
                            room.Name = key;
                            room.Percentage = room.Available * 100 / (room.Available + room.Occupied);
                            item.roomAvailabilities.push(room);
                        }
                        item.totalAvailable = available;
                        item.numberOfComputers = total;
                        item.availablePercentage = available / total * 100;
                        item.numberOfRooms = numberOfRooms;
                    });

                    librariesByWeek.forEach(function (item) {
                        item.departments.forEach(function (department) {
                            department.weekHoursInfo = [];
                            for (var key in department.weeks[0]) {
                                var day = department.weeks[0][key];
                                var weekday = day;
                                weekday.weekday = key;
                                department.weekHoursInfo.push(weekday);
                            }
                        });
                    });
                    var today = moment().format("YYYY-MM-DD");
                    librariesByDay.forEach(function (lib) {
                        if (lib.desc) {
                            try {
                                var j = jQuery(lib.desc.unescapeHTML());
                                lib.desc = j.contents().text().replace(/\s+/ig, ' ');
                            } catch (ex) {}
                        }

                        lib.numberOfOpenDepartments = lib.departments.filter(function (department) {
                            return department.times.currently_open;
                        }).length;

                        var found = computers.find(function (item) {
                            return item.mappedName == lib.name;
                        });
                        if (found) {
                            lib.isComputersAvailable = true;
                            lib.totalAvailable = found.totalAvailable;
                            lib.numberOfComputers = found.numberOfComputers;
                            lib.availablePercentage = found.availablePercentage;
                            lib.numberOfComputerRooms = found.numberOfRooms;
                            lib.rooms = found.roomAvailabilities;
                        }

                        lib.departments.sort(function (a, b) {
                            return a.times.currently_open ? b.times.currently_open ? 0 : 1 : b.times.currently_open ? -1 : 0;
                        });
                        var week = librariesByWeek.find(function (value) {
                            return value.lid == lib.lid;
                        });
                        var openHour = '24:00:00';
                        var closeHour = '00:00:00';
                        if (week) {
                            lib.departmentsWeek = week.departments;
                            lib.departments.forEach(function (department) {
                                var match = week.departments.find(function (value) {
                                    return value.name == department.name;
                                });
                                if (match) {
                                    match.weeks.forEach(function (week) {
                                        for (var key in week) {
                                            var day = week[key];
                                            if (day.date == today) {
                                                if (!/closed/ig.test(day.rendered)) {
                                                    openHour = day.open < openHour ? day.open : openHour;
                                                    closeHour = day.close > closeHour ? day.close : closeHour;
                                                }
                                            }
                                        }
                                    });
                                }
                            });
                        }
                        lib.openHour = openHour;
                        lib.closeHour = closeHour;
                        if (lib.openHour == '24:00:00' && lib.closeHour == '00:00:00') {
                            lib.renderedHours = 'Closed Today';
                        } else if (lib.openHour == '00:00:00' && lib.closeHour == '24:00:00') {
                            lib.renderedHours = 'Open 24 Hours Today';
                        } else {
                            lib.renderedHours = 'Open {0} to {1} Today'.format(lib.openHour, lib.closeHour);
                        }
                    });

                    librariesByDay.sort(function (a, b) {
                        return Math.sign(b.numberOfOpenDepartments - a.numberOfOpenDepartments);
                    });
                    result.computers = computers;
                    result.libraries = librariesByDay;
                    resolve(result);
                }
                function done() {
                    count -= 1;
                    if (count == 0) calculate();
                }

                _this.library_hours_day().then(function (value) {
                    librariesByDay = value.locations;done();
                }, function (reason) {
                    return reject(reason);
                });
                _this.library_hours_week().then(function (value) {
                    librariesByWeek = value.locations;done();
                }, function (reason) {
                    return reject(reason);
                });
                _this.computer_availability().then(function (value) {
                    computers = value;done();
                }, function (reason) {
                    return reject(reason);
                });
            });
        }
    }]);

    return LibraryDataClient;
}();

LibraryDataClient.ComputerLibraryMappings = {
    'Architecture &amp; Music Library': 'Architecture & Music Library', 'Biological Sciences Library': 'Biological Sciences Library', 'D.H. Engineering &amp; Sciences Library': 'Dorothy Hill Engineering and Sciences Library', 'Duhig Building': 'Duhig Tower', 'Gatton Campus Library': 'Gatton Library', 'Graduate Economics &amp; Business Library': 'Graduate Economics and Business Library', 'Herston Health Sciences Library': 'Herston Health Sciences Library', 'Mater Hospital Library': 'Mater McAuley Library', 'PACE Health Sciences Library': 'PACE Health Sciences Library', 'Social Sciences &amp; Humanities Library': 'Social Sciences & Humanities Library'
};
var ngstd;
(function (ngstd) {
    var debugging = false;
    function AngluarJSTemplateUrlPacker(url) {
        return url;
    }
    ngstd.AngluarJSTemplateUrlPacker = AngluarJSTemplateUrlPacker;

    var NamedObject = function () {
        function NamedObject() {
            _classCallCheck(this, NamedObject);
        }

        _createClass(NamedObject, [{
            key: 'clone',
            value: function clone(value) {
                for (var attr in value) {
                    if (attr != "TypeName" && value.hasOwnProperty(attr)) this[attr] = value[attr];
                }
            }
        }, {
            key: 'TypeName',
            get: function get() {
                var funcNameRegex = /function (.{1,})\(/;
                var results = funcNameRegex.exec(this.constructor.toString());
                return results && results.length > 1 ? results[1] : "";
            }
        }]);

        return NamedObject;
    }();

    ngstd.NamedObject = NamedObject;

    var AngularModule = function () {
        function AngularModule(name, modules, configFn) {
            var _this2 = this;

            _classCallCheck(this, AngularModule);

            this.LocationHtml5Mode = function () {
                _this2.app.config(['$locationProvider', function ($locationProvider) {
                    $locationProvider.html5Mode(true);
                }]);
            };

            this.includeContentDirective = function () {
                _this2.addInjectedDirective('content', function () {
                    return new ContentDirective();
                });
            };
            if (!modules) modules = [];
            this.app = angular.module(name, modules, configFn);
        }

        _createClass(AngularModule, [{
            key: 'config',
            value: function config(configFn) {
                this.app.config(configFn);
            }
        }, {
            key: 'trustUrl',
            value: function trustUrl(pattern) {
                this.app.config(function ($compileProvider) {
                    $compileProvider.aHrefSanitizationWhitelist(pattern);
                });
            }
        }, {
            key: 'addController',
            value: function addController(controllerType) {
                if (!controllerType.selector || typeof controllerType.selector != 'string') {
                    console.error('Missing static selector field in type:', controllerType);
                    throw 'Error: Missing static selector field in the AngularController type!';
                }
                this.app.controller(controllerType.selector, controllerType);
            }
        }, {
            key: 'addControllerAsSelector',
            value: function addControllerAsSelector(selector, controller) {
                this.app.controller(selector, controller);
            }
        }, {
            key: 'addInjectedDirective',
            value: function addInjectedDirective(name, factory) {
                this.app.directive(name, factory);
            }
        }, {
            key: 'addDirective',
            value: function addDirective(directiveType) {
                if (!directiveType.selector || typeof directiveType.selector != 'string') {
                    console.error('Missing static selector field in type:', directiveType);
                    throw 'Error: Missing static selector field in the AngularDirective type!';
                }
                this.app.directive(directiveType.selector, function () {
                    return new directiveType();
                });
            }
        }, {
            key: 'addStdDirective',
            value: function addStdDirective(name, templateUrl, Controller) {
                this.app.directive(name, function () {
                    return {
                        restrict: 'E',
                        templateUrl: templateUrl,
                        controller: Controller,
                        scope: {
                            app: '=',
                            data: '=',
                            model: '=',
                            parent: '='
                        },
                        controllerAs: 'controller'
                    };
                });
            }
        }, {
            key: 'addFactory',
            value: function addFactory(name, factory) {
                this.app.factory(name, factory);
            }
        }, {
            key: 'addService',
            value: function addService(name, service) {
                this.app.service(name, service);
            }
        }, {
            key: 'includeFilters',
            value: function includeFilters(filterObject) {
                var _this3 = this;

                var _loop = function _loop(key) {
                    _this3.app.filter(key, function () {
                        return filterObject[key];
                    });
                };

                for (var key in filterObject) {
                    _loop(key);
                }
            }
        }, {
            key: 'includeLoaderController',
            value: function includeLoaderController(name) {
                this.addControllerAsSelector(name ? name : 'loader', LoaderController);
            }
        }, {
            key: 'Base',
            get: function get() {
                return this.app;
            }
        }]);

        return AngularModule;
    }();

    ngstd.AngularModule = AngularModule;

    var AngularController = function AngularController() {
        _classCallCheck(this, AngularController);
    };

    ngstd.AngularController = AngularController;

    var LoaderController = function (_AngularController) {
        _inherits(LoaderController, _AngularController);

        function LoaderController($element) {
            _classCallCheck(this, LoaderController);

            var _this4 = _possibleConstructorReturn(this, (LoaderController.__proto__ || Object.getPrototypeOf(LoaderController)).call(this));

            _this4.$element = $element;

            $element.removeClass('loader');

            $element.find('.loader-hide').removeClass('loader-hide');

            $element.find('.loader-content').remove();
            return _this4;
        }

        return LoaderController;
    }(AngularController);

    LoaderController.$inject = ['$element'];
    LoaderController.selector = 'loader';
    ngstd.LoaderController = LoaderController;

    var DirectiveRestrict = function DirectiveRestrict() {
        _classCallCheck(this, DirectiveRestrict);
    };

    DirectiveRestrict.E = 'E';
    DirectiveRestrict.A = 'A';
    DirectiveRestrict.AE = 'AE';
    DirectiveRestrict.C = 'C';
    ngstd.DirectiveRestrict = DirectiveRestrict;

    var BindingRestrict = function BindingRestrict() {
        _classCallCheck(this, BindingRestrict);
    };

    BindingRestrict.TwoWay = '=';
    BindingRestrict.In = '@';
    BindingRestrict.Callback = '&';
    BindingRestrict.TwoWayOptional = '=?';
    ngstd.BindingRestrict = BindingRestrict;

    var AngularDirective = function AngularDirective() {
        _classCallCheck(this, AngularDirective);

        this.scope = {};
        return this;
    };

    ngstd.AngularDirective = AngularDirective;

    var DataTemplate = function DataTemplate() {
        _classCallCheck(this, DataTemplate);
    };

    ngstd.DataTemplate = DataTemplate;

    var DirectiveViewController = function () {
        function DirectiveViewController($scope, $element, $compile) {
            _classCallCheck(this, DirectiveViewController);

            this.$scope = $scope;
            this.$element = $element;
            this.$compile = $compile;
        }

        _createClass(DirectiveViewController, [{
            key: 'View',
            get: function get() {
                return this._View;
            },
            set: function set(value) {
                this._View = value;

                if (!value.selector || typeof value.selector != 'string') {
                    console.error('Missing static selector field in the Angular Directive Type: ', value);
                } else {
                    if (this.CurrentChildScope) this.CurrentChildScope.$destroy();
                    this.$element.children().remove();

                    this.CurrentChildScope = this.$scope.$new();
                    this.CurrentElement = this.$compile('<{0}></{0}>'.format(value.selector))(this.CurrentChildScope);
                    this.$element.append(this.CurrentElement);
                }
            }
        }]);

        return DirectiveViewController;
    }();

    DirectiveViewController.$inject = ['$scope', '$element', '$compile'];
    ngstd.DirectiveViewController = DirectiveViewController;

    var DirectiveViewDirecive = function (_AngularDirective) {
        _inherits(DirectiveViewDirecive, _AngularDirective);

        function DirectiveViewDirecive() {
            _classCallCheck(this, DirectiveViewDirecive);

            var _this5 = _possibleConstructorReturn(this, (DirectiveViewDirecive.__proto__ || Object.getPrototypeOf(DirectiveViewDirecive)).call(this));

            _this5.restrict = 'AE';
            _this5.scope.ref = '=?';
            _this5.controller = DirectiveViewController;
            _this5.controllerAs = 'ctrl';
            return _this5;
        }

        return DirectiveViewDirecive;
    }(AngularDirective);

    ngstd.DirectiveViewDirecive = DirectiveViewDirecive;

    var ContentController = function ContentController($compile, $element, $http, $scope) {
        var _this6 = this;

        _classCallCheck(this, ContentController);

        this.$compile = $compile;
        this.$element = $element;
        this.$http = $http;
        this.$scope = $scope;
        this.templates = [];

        $element.children('template').each(function (index, elem) {
            var $elem = $(elem);
            var template = new DataTemplate();
            template.key = $elem.attr('key');
            template.path = $elem.attr('path');
            template.type = $elem.attr('type');
            template.url = $elem.attr('url');
            template.jQuery = $elem;
            if (template.url) {
                template.template = $elem.html();
                $http.get(template.url).success(function (data) {
                    template.template = data;

                    if ($scope.selector) {
                        $scope.selector($scope.data, _this6.templates).then(function (result) {
                            if ($scope.view != result) {
                                $scope.view = result;
                                $scope.$digest();
                            }
                        });
                    }
                });
            } else {
                template.template = $elem.html();
            }
            _this6.templates.push(template);
        });
        $element.children().remove();
        $scope.$watch('data', function (newValue, oldValue) {
            if ($scope.selector) {
                $scope.selector(newValue, _this6.templates).then(function (template) {
                    if (typeof template == 'string') {
                        $scope.view = template;
                        $scope.$apply();
                    }
                });
            } else {
                console.warn('Content View Warning: selector is undefined.\n' + 'Please provide a valid selector function:\n' + 'selector: (data: any, templates: DataTemplate[]) => string');
            }
        });

        $scope.$watch('view', function (newValue, oldValue) {
            if (_this6.childscope) _this6.childscope.$destroy();
            $element.children().remove();

            _this6.childscope = $scope.$parent.$new();
            $element.append($compile(newValue)(_this6.childscope));
        });
    };

    ContentController.$inject = ['$compile', '$element', '$http', '$scope'];
    ngstd.ContentController = ContentController;

    var ContentDirective = function (_ngstd$AngularDirecti) {
        _inherits(ContentDirective, _ngstd$AngularDirecti);

        function ContentDirective() {
            _classCallCheck(this, ContentDirective);

            var _this7 = _possibleConstructorReturn(this, (ContentDirective.__proto__ || Object.getPrototypeOf(ContentDirective)).call(this));

            _this7.restrict = 'E';
            _this7.template = '';
            _this7.scope.data = ngstd.BindingRestrict.TwoWay;
            _this7.scope.view = ngstd.BindingRestrict.TwoWayOptional;
            _this7.scope.controller = ngstd.BindingRestrict.TwoWayOptional;
            _this7.scope.app = ngstd.BindingRestrict.TwoWayOptional;
            _this7.scope.selector = ngstd.BindingRestrict.TwoWayOptional;
            _this7.controller = ContentController;
            return _this7;
        }

        return ContentDirective;
    }(ngstd.AngularDirective);

    ngstd.ContentDirective = ContentDirective;
})(ngstd || (ngstd = {}));

var DetailController = function () {
    function DetailController($scope, $mdMedia) {
        _classCallCheck(this, DetailController);

        this.$scope = $scope;
        this.$mdMedia = $mdMedia;
        this.$inject = ['$scope', '$mdMedia'];
    }

    _createClass(DetailController, [{
        key: 'onLoad',
        value: function onLoad() {
            this.library = this.parent.SelectedLibrary;
        }
    }, {
        key: 'parent',
        get: function get() {
            return this.$scope.$parent['ctrl'];
        }
    }]);

    return DetailController;
}();

var DetailDirective = function (_ngstd$AngularDirecti2) {
    _inherits(DetailDirective, _ngstd$AngularDirecti2);

    function DetailDirective() {
        var _ret2;

        _classCallCheck(this, DetailDirective);

        var _this8 = _possibleConstructorReturn(this, (DetailDirective.__proto__ || Object.getPrototypeOf(DetailDirective)).call(this));

        _this8.restrict = 'AE';
        _this8.template = " <div layout=\"column\" ng-init=\"ctrl.onLoad();\"> <md-list flex> <!-- name of library --> <div class=\"md-display-1\" layout=\"column\" layout-align=\"center center\">{{ctrl.library.name}}</div> <div layout=\"row\" layout-wrap layout-margin=\"2\" layout-align=\"center center\"> <div class=\"md-3-line table-item\" layout=\"column\" layout-align=\"stretch stretch\" flex=\"100\" flex-gt-md=\"80\"> <div layout-gt-sm=\"row\" layout=\"column\" flex=\"initial\" style=\"background-color: #45b; border-radius: 28px 28px 0px 0px\"> <!-- library name --> <div flex=\"33\" class=\"list-row\" layout=\"row\"> <md-button class=\"md-fab md-primary info-button\" ng-click=\"ctrl.setMode(item.lid);\" aria-label=\"{{ctrl.library.name}}\"> <md-tooltip md-direction=\"top\" class=\"md-title\"> Library Name </md-tooltip> <md-icon md-svg-src=\"/img/info.svg\"></md-icon> </md-button> <div class=\"md-title lib-title\" style=\"flex: 1 1 auto; color: white; padding: 0px 3px; display: flex; align-items: center; flex-direction: row; border-radius: 4px\">{{ctrl.library.name }}</div> </div> <!-- computer availability chart --> <div flex=\"33\" class=\"list-row\" layout=\"row\" style=\"background-color: white\"> <md-button ng-style=\"ctrl.library.isComputersAvailable?{'background-color':'green'}:{}\" class=\"md-fab md-primary info-button\" aria-label=\"Compute Availability\" ng-disabled=\"!ctrl.library.isComputersAvailable\"> <md-tooltip md-direction=\"top\" class=\"md-title\"> Computer Availability </md-tooltip> <md-icon md-svg-src=\"/img/computer.svg\"></md-icon> </md-button> <div class=\"md-raised\" style=\"flex: 1 1 auto; display: flex; align-items: center; flex-direction: column; align-items: flex-start; justify-content: space-around\" ng-if=\"ctrl.library.isComputersAvailable\" hisback value=\"ctrl.library.availablePercentage\" foreground=\"'#bfb'\" background=\"'#ddd'\"> <span class=\"all-computers\">Computers: {{ ctrl.library.totalAvailable }} out of {{ ctrl.library.numberOfComputers }} available</span> <span>{{ctrl.library.numberOfComputerRooms}} Computer {{(ctrl.library.numberOfComputerRooms>1)?'Rooms':'Room'}}</span> </div> <div class=\"md-raised\" style=\"flex: 1 1 auto; display: flex; align-items: center; flex-direction: row\" ng-if=\"!ctrl.library.isComputersAvailable\" hisback value=\"ctrl.library.availablePercentage\" foreground=\"'#bfb'\" background=\"'#ddd'\">Computers: N/A</div> </div> <!-- open/close status --> <div flex=\"33\" class=\"list-row\" layout=\"row\" style=\"color: white\"> <md-button ng-style=\"(ctrl.library.numberOfOpenDepartments>0)?{'background-color':'#ff6a00'}:{'background-color':'#bbb'}\" class=\"md-fab md-primary info-button\" aria-label=\"Compute Availability\"> <md-tooltip md-direction=\"top\" class=\"md-title\"> {{(ctrl.library.numberOfOpenDepartments>0)?'Currently Open':'Currently Closed'}} </md-tooltip> <md-icon md-svg-src=\"/img/study.svg\"></md-icon> </md-button> <div style=\"flex: 1 1 auto; display: flex; align-items: flex-start; flex-direction: column; justify-content: space-around; border-radius: 4px\"> <div style=\"font-size: 18px\" ng-if=\"ctrl.library.numberOfOpenDepartments>0\">{{ctrl.library.numberOfOpenDepartments}} out of {{ctrl.library.departments.length}} {{ctrl.library.departments.length>1?' Departments':' Department'}} Open</div> <div style=\"font-size: 18px\" ng-if=\"ctrl.library.numberOfOpenDepartments==0\">Currently Closed</div> <div style=\"font-size: 18px\">{{ctrl.library.renderedHours}}</div> </div> </div> </div> <!-- general information for the library, row layout when gt-sm, column layout when sm xs --> <div class=\"md-title detail-subtitle\" layout=\"column\" layout-align=\"center center\"> <div>Library Information</div> </div> <div layout=\"column\" layout-gt-sm=\"row\"> <div class=\"detail-even\" layout=\"column\" flex=\"auto\" layout-align=\"center center\"> <div class=\"md-title detail-header\">ID</div> <div class=\"detail-info lib-id\">{{ctrl.library.lid}}</div> </div> <div class=\"detail-odd\" layout=\"column\" flex=\"auto\" layout-align=\"center center\"> <div class=\"md-title detail-header\">Category</div> <div class=\"detail-info\">{{ctrl.library.category}}</div> </div> <div class=\"detail-even\" layout=\"column\" flex=\"auto\" layout-align=\"center center\"> <div class=\"md-title detail-header\">Abbreviation</div> <div class=\"detail-info\">{{ctrl.library.abbr}}</div> </div> <div class=\"detail-odd\" layout=\"column\" flex=\"auto\" layout-align=\"center center\"> <div class=\"md-title detail-header\">UQ Website</div> <div class=\"detail-info\"> <a ng-href=\"{{ctrl.library.url}}\" target=\"{{'_lib'+ctrl.library.lid}}\">Link</a> </div> </div> </div> <!-- description of library --> <div layout=\"column\"> <div layout=\"column\" flex=\"auto\" layout-align=\"center center\"> <div class=\"md-title detail-header\">Description</div> <div flex=\"initial\">{{ctrl.library.desc}}</div> </div> </div> <div class=\"md-title detail-subtitle\" layout=\"column\" layout-align=\"center center\" ng-if=\"ctrl.library.rooms\"> <div>Rooms Computer Avaliability</div> </div> <!-- computer availability for each room, row layout when gt-sm, column layout when sm xs --> <div layout=\"column\" layout-gt-sm=\"row\"> <div ng-repeat=\"room in ctrl.library.rooms\" class=\"detail-room-availability\" layout=\"column\" flex=\"auto\" layout-align=\"center center\" hisback value=\"room.Percentage\" foreground=\"'#bfb'\" background=\"'#ddd'\"> <div class=\"md-title\">{{room.Name}}</div> <div class=\"room-computers\">{{room.Available}} out of {{room.Available + room.Occupied}} Available</div> </div> </div> <div class=\"md-title detail-subtitle\" layout=\"column\" layout-align=\"center center\"> <div>Department Opening Hours</div> </div> <!-- list of date and weekday, shown when gt-sm, row layout --> <div style=\"flex: 0 0 56px; flex-direction: row; align-items: stretch; background-color: #555; color: white\" layout=\"row\" hide show-gt-sm> <div style=\"flex: 1 1 23%\" layout=\"column\" layout-align=\"center center\">Department</div> <div ng-repeat=\"day in ctrl.library.departmentsWeek[0].weekHoursInfo\" layout=\"column\" layout-align=\"center center\" style=\"flex: 1 1 11%\" ng-style=\"{'background-color': ($index % 2==1)?'rgba(255,255,255,0)':'rgba(20,20,20,0.5)'}\"> <div> {{day.date}} </div> <div> {{day.weekday}} </div> </div> </div> <!-- opening hours for corresponding date and weekday, shown when gt-sm, row layout --> <div ng-repeat=\"department in ctrl.library.departmentsWeek\" ng-style=\"{'background-color': ($index % 2==0)?'white':'lightgrey'}\" style=\"display: flex; flex: 0 0 56px; flex-direction: row; align-items: stretch\" ng-hide=\"!ctrl.$mdMedia('gt-sm')\"> <div style=\"flex: 1 1 23%\" layout=\"column\" layout-align=\"center center\">{{department.name}}</div> <div class=\"rendered-hours\" ng-repeat=\"day in department.weekHoursInfo\" layout=\"column\" layout-align=\"center center\" style=\"flex: 1 1 11%\" ng-style=\"{'background-color': ($index % 2==1)?'rgba(255,255,255,0)':'rgba(80,80,80,0.2)'}\"> {{day.rendered}} </div> </div> <!-- opening hours for date and weekday, shown when xs sm, column layout --> <div ng-repeat=\"department in ctrl.library.departmentsWeek\" ng-style=\"{'background-color': ($index % 2==0)?'white':'lightgrey'}\" layout=\"row\" ng-hide=\"ctrl.$mdMedia('gt-sm')\"> <div flex=\"40\" layout=\"column\" layout-align=\"center center\">{{department.name}}</div> <div flex=\"60\" layout=\"column\"> <div flex=\"60\" layout=\"row\" layout-align=\"center center\" class=\"list-row\" ng-repeat=\"day in department.weekHoursInfo\" ng-style=\"{'background-color': ($index % 2==0)?'rgba(255,255,255,0)':'rgba(80,80,80,0.2)'}\"> <div flex=\"50\" layout=\"column\" layout-align=\"center center\"> <div> {{day.date}} </div> <div> {{day.weekday}} </div> </div> <div class=\"rendered-hours\" flex=\"50\" layout=\"column\" layout-align=\"center center\" style=\"flex: 1 1 11%\"> {{day.rendered}} </div> </div> </div> </div> </div> </div> </md-list> </div>";
        _this8.controller = DetailController;
        _this8.controllerAs = 'ctrl';
        return _ret2 = _this8, _possibleConstructorReturn(_this8, _ret2);
    }

    return DetailDirective;
}(ngstd.AngularDirective);

DetailDirective.selector = 'detail';

var MainController = function () {
    function MainController($scope, $location, $mdMedia, $http, $timeout) {
        var _this9 = this;

        _classCallCheck(this, MainController);

        this.$scope = $scope;
        this.$location = $location;
        this.$mdMedia = $mdMedia;
        this.$http = $http;
        this.$timeout = $timeout;
        this.isLoading = false;

        this.routeTests = { today: /^\/today/ig, week: /^\/week/ig, lib: /^\/\d+/ig, new: /^\/new/ig };

        this.parsePath = function () {
            var path = _this9.$location.path();
            var route = void 0;

            for (var key in _this9.routeTests) {
                _this9.routeTests[key].lastIndex = undefined;
                if (_this9.routeTests[key].test(path)) {
                    route = key;
                    break;
                }
            }
            if (route) {
                if (route == 'lib') {
                    _this9.displayMode = /\/(\d+)/ig.exec(path)[1];
                } else {
                    _this9.displayMode = route;
                }
            } else {
                _this9.displayMode = 'today';
            }
        };
        this.templateSelector = function (key, templates) {
            return __awaiter(_this9, void 0, void 0, regeneratorRuntime.mark(function _callee5() {
                var found;
                return regeneratorRuntime.wrap(function _callee5$(_context5) {
                    while (1) {
                        switch (_context5.prev = _context5.next) {
                            case 0:
                                found = void 0;
                                _context5.t0 = typeof key === 'undefined' ? 'undefined' : _typeof(key);
                                _context5.next = _context5.t0 === 'string' ? 4 : _context5.t0 === 'number' ? 6 : 8;
                                break;

                            case 4:
                                if (/\d+/g.test(key)) {
                                    found = templates.find(function (item) {
                                        return item.key == 'detail';
                                    });
                                } else {
                                    found = templates.find(function (item) {
                                        return item.key == key;
                                    });
                                }
                                return _context5.abrupt('break', 8);

                            case 6:
                                found = templates.find(function (item) {
                                    return item.key == 'detail';
                                });
                                return _context5.abrupt('break', 8);

                            case 8:
                                if (!found) {
                                    _context5.next = 17;
                                    break;
                                }

                                this.$location.path('\/' + key);
                                this.isLoading = true;
                                _context5.next = 13;
                                return this.wait(200);

                            case 13:
                                this.isLoading = false;
                                return _context5.abrupt('return', found.template);

                            case 17:
                                return _context5.abrupt('return', '');

                            case 18:
                            case 'end':
                                return _context5.stop();
                        }
                    }
                }, _callee5, this);
            }));
        };

        this.proxy = new HttpProxy(this.$http, 'proxy.cgi.js');
        this.proxy.useProxy = true;
        this.client = new LibraryDataClient(this.proxy);
    }

    _createClass(MainController, [{
        key: 'wait',
        value: function wait(value) {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee6() {
                var _this10 = this;

                return regeneratorRuntime.wrap(function _callee6$(_context6) {
                    while (1) {
                        switch (_context6.prev = _context6.next) {
                            case 0:
                                return _context6.abrupt('return', new Promise(function (resolve) {
                                    _this10.$timeout(function () {
                                        return resolve();
                                    }, value);
                                }));

                            case 1:
                            case 'end':
                                return _context6.stop();
                        }
                    }
                }, _callee6, this);
            }));
        }
    }, {
        key: 'onLoad',
        value: function onLoad() {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee7() {
                var data;
                return regeneratorRuntime.wrap(function _callee7$(_context7) {
                    while (1) {
                        switch (_context7.prev = _context7.next) {
                            case 0:
                                this.isLoading = true;
                                _context7.next = 3;
                                return this.client.getData();

                            case 3:
                                data = _context7.sent;

                                this.libraries = data.libraries;
                                this.computers = data.computers;
                                this.isLoading = false;
                                this.$scope.$apply();
                                this.parsePath();

                            case 9:
                            case 'end':
                                return _context7.stop();
                        }
                    }
                }, _callee7, this);
            }));
        }
    }, {
        key: 'SelectedLibrary',
        get: function get() {
            var id = Number.parseInt(this.displayMode.toString());
            if (typeof id != 'number') return;
            var found = this.libraries.find(function (lib) {
                return lib.lid == id;
            });
            return found;
        }
    }]);

    return MainController;
}();

MainController.$inject = ['$scope', '$location', '$mdMedia', '$http', '$timeout'];

var MainDirective = function (_ngstd$AngularDirecti3) {
    _inherits(MainDirective, _ngstd$AngularDirecti3);

    function MainDirective() {
        _classCallCheck(this, MainDirective);

        var _this11 = _possibleConstructorReturn(this, (MainDirective.__proto__ || Object.getPrototypeOf(MainDirective)).call(this));

        _this11.restrict = 'AE';
        _this11.template = " <div layout=\"column\" flex layout-align=\"strech stretch\" ng-init=\"ctrl.onLoad();\"> <!-- header bar --> <div theme=\"forest\" layout=\"row\" ng-style=\"ctrl.$mdMedia('gt-sm')?{'flex':'1 0 120px'}:{'flex':'0 1 50px'}\" style=\"max-height: 120px; min-height:50px\" layout-fill layout-align=\"center center\" class=\"header-bar\"> <!-- logo only shown when gt-sm --> <img src=\"/img/logo.svg\" height=\"120\" width=\"120\" flex=\"initial\" hide show-gt-sm title=\"The University of Queensland\"> <div flex=\"initial\" layout=\"column\" layout-align=\"center center\"> <!-- UQ title only shown when gt-sm --> <span class=\"center white md-title\" flex=\"initial\" hide show-gt-sm>The University of Queensland</span> <!-- title, font size reduced when width < 400px --> <span class=\"center white\" ng-class=\"ctrl.$mdMedia('max-width: 400px')?'md-headline':'md-display-1'\" flex=\"initial\">UQ Library Information</span> </div> </div> <div flex=\"auto\" layout=\"column\" layout-align=\"stretch stretch\"> <!-- both menu and button set the ctrl.displayMode to trigger the view change  --> <md-toolbar class=\"md-hue-2\" layout=\"row\" layout-align=\"start center\" style=\"flex: 0 0 64px\"> <!-- menu shown when xs --> <md-menu md-offset=\"0 -7\" hide show-xs flex=\"grow\" layout=\"row\"> <md-button aria-label=\"Open demo menu\" class=\"md-icon-button\" layout=\"row\" style=\"width:100px\" ng-click=\"$mdOpenMenu($event)\"> <md-icon md-menu-origin md-svg-icon=\"img/menu.svg\"></md-icon> Menus </md-button> <md-menu-content class=\"md-toolbar\" width=\"6\"> <md-menu-item> <md-button class=\"md-raised\" ng-click=\"ctrl.displayMode='today'\" ng-class=\"ctrl.displayMode == 'today'?'md-warn':'md-primary'\"> <span md-menu-align-target>Libraries</span> </md-button> </md-menu-item> <md-menu-item> <md-button class=\"md-raised\" ng-click=\"ctrl.displayMode='week'\" ng-class=\"ctrl.displayMode == 'week'?'md-warn':'md-primary'\"> <span md-menu-align-target>Opening Hours</span> </md-button> </md-menu-item> <md-menu-item> <md-button class=\"md-raised\" ng-click=\"ctrl.displayMode='new'\" ng-class=\"ctrl.displayMode == 'new'?'md-warn':'md-primary'\"> <span md-menu-align-target>New Library</span> </md-button> </md-menu-item> </md-menu-content> </md-menu> <!-- button shown when gt-xs --> <md-button class=\"md-raised\" hide show-gt-xs ng-click=\"ctrl.displayMode='today'\" ng-class=\"ctrl.displayMode == 'today'?'md-warn':'md-primary'\" aria-label=\"Settings\" ng-disabled=\"false\"> Libraries </md-button> <md-button class=\"md-raised\" hide show-gt-xs ng-click=\"ctrl.displayMode='week'\" ng-class=\"ctrl.displayMode == 'week'?'md-warn':'md-primary'\" aria-label=\"Settings\" ng-disabled=\"false\"> Opening Hours </md-button> <md-button class=\"md-raised\" hide show-gt-xs ng-click=\"ctrl.displayMode='new'\" ng-class=\"ctrl.displayMode == 'new'?'md-warn':'md-primary'\" aria-label=\"Settings\" ng-disabled=\"false\"> New Library </md-button> </md-toolbar> <!-- progress bar visible when loading --> <md-progress-linear md-mode=\"{{ctrl.isLoading?'query':'determinate'}}\" ng-if=\"ctrl.isLoading\"></md-progress-linear> <!-- content data bound to ctrl.displayMode, which determines which template to use  --> <content data=\"ctrl.displayMode\" selector=\"ctrl.templateSelector\"> <template key=\"today\"> <today></today> </template> <template key=\"week\"> <week></week> </template> <template key=\"new\"> <newlib></newlib> </template> <template key=\"detail\"> <detail></detail> </template> </content> </div> </div>";
        _this11.controller = MainController;
        _this11.controllerAs = 'ctrl';
        return _this11;
    }

    return MainDirective;
}(ngstd.AngularDirective);

MainDirective.selector = 'main';

var NewLibController = function () {
    function NewLibController($http, $scope, $mdMedia) {
        _classCallCheck(this, NewLibController);

        this.$http = $http;
        this.$scope = $scope;
        this.$mdMedia = $mdMedia;
        this.$inject = ['$http', '$scope', '$mdMedia'];

        this.SaveDisabled = false;
        this.client = new LibraryDataClient($http);
    }

    _createClass(NewLibController, [{
        key: 'onLoaded',
        value: function onLoaded() {
            this.Library = {};
        }
    }, {
        key: 'Save',
        value: function Save() {
            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee8() {
                return regeneratorRuntime.wrap(function _callee8$(_context8) {
                    while (1) {
                        switch (_context8.prev = _context8.next) {
                            case 0:
                                if (!this.SaveDisabled) {
                                    _context8.next = 2;
                                    break;
                                }

                                return _context8.abrupt('return');

                            case 2:
                                if (!LibDataFilters.hasKeys(this.$scope.libraryForm.$error)) {
                                    _context8.next = 5;
                                    break;
                                }

                                this.status = 'Errors found!';
                                return _context8.abrupt('return');

                            case 5:
                                this.status = 'Creating new Library...';
                                this.SaveDisabled = true;
                                _context8.prev = 7;
                                _context8.next = 10;
                                return this.client.createLibrary(this.Library);

                            case 10:
                                if (!_context8.sent) {
                                    _context8.next = 14;
                                    break;
                                }

                                _context8.t0 = 'Library Successfully Created!';
                                _context8.next = 15;
                                break;

                            case 14:
                                _context8.t0 = 'Failed.';

                            case 15:
                                this.status = _context8.t0;
                                _context8.next = 22;
                                break;

                            case 18:
                                _context8.prev = 18;
                                _context8.t1 = _context8['catch'](7);

                                console.error('Error while creating library: ', _context8.t1);
                                this.status = 'Error while creating library.';

                            case 22:
                                this.SaveDisabled = false;

                                this.$scope.$apply();

                            case 24:
                            case 'end':
                                return _context8.stop();
                        }
                    }
                }, _callee8, this, [[7, 18]]);
            }));
        }
    }, {
        key: 'Cancel',
        value: function Cancel() {
            this.SaveDisabled = true;
            var main = this.$scope.$parent['ctrl'];
            main.displayMode = 'today';
        }
    }]);

    return NewLibController;
}();

var NewLibDirective = function (_ngstd$AngularDirecti4) {
    _inherits(NewLibDirective, _ngstd$AngularDirecti4);

    function NewLibDirective() {
        var _ret3;

        _classCallCheck(this, NewLibDirective);

        var _this12 = _possibleConstructorReturn(this, (NewLibDirective.__proto__ || Object.getPrototypeOf(NewLibDirective)).call(this));

        _this12.restrict = 'AE';
        _this12.template = " <!-- title --> <div class=\"md-display-1\" flex=\"initial\" layout=\"column\" layout-align=\"center center\">Create New Library</div> <form name=\"libraryForm\" flex=\"initial\" layout=\"column\" layout-align=\"center center\" style=\"min-height: 0px\"> <div layout=\"column\" flex=\"initial\" ng-style=\"ctrl.$mdMedia('gt-sm')?{'min-width':'800px'}:{}\"> <div layout=\"column\" layout-gt-xs=\"row\" flex=\"initial\"> <!-- library id --> <md-input-container class=\"md-block input-text\" flex-gt-sm> <label>Library ID</label> <input name=\"id\" type=\"number\" ng-pattern=\"/^\\d*$/\" required ng-model=\"ctrl.Library.lid\"> <div> <div ng-if=\"libraryForm.id.$error['required']\" class=\"input-error-message\"> A valid library ID must be provided. </div> <div ng-if=\"libraryForm.id.$error['pattern']\" class=\"input-error-message\"> A valid library ID should contains only numbers. </div> </div> </md-input-container> <!-- library abbreviation --> <md-input-container class=\"md-block input-text\" flex-gt-sm> <label>Abbreviation</label> <input name=\"abbr\" required ng-minlength=\"5\" ng-maxlength=\"5\" ng-model=\"ctrl.Library.abbr\"> <div> <div ng-if=\"libraryForm.abbr.$error['required']\" class=\"input-error-message\"> A library abbreviation of 5 characters must be provided. </div> <div ng-if=\"libraryForm.abbr.$error['minlength']||libraryForm.abbr.$error['maxlength']\" class=\"input-error-message\"> A library abbreviation must be exactly 5 characters. </div> </div> </md-input-container> </div> <div layout=\"row\" flex=\"initial\"> <!-- library name --> <md-input-container class=\"md-block input-text\" flex-gt-sm> <label>Library Name</label> <input required name=\"name\" ng-maxlength=\"50\" ng-model=\"ctrl.Library.name\"> <div> <div ng-show=\"libraryForm.name.$error['required']\" class=\"input-error-message\"> A library name must be provided. </div> <div ng-show=\"libraryForm.name.$error['maxlength']\" class=\"input-error-message\"> A valid library name must be no longer than 50 characters. </div> </div> </md-input-container> </div> <div layout=\"row\" flex=\"initial\"> <!-- select of campus --> <md-input-container class=\"md-block input-select\" flex-gt-sm> <label>Campus </label> <md-select name=\"campus\" ng-model=\"ctrl.Library.campus\" required> <md-option value=\"St Lucia\">St Lucia</md-option> <md-option value=\"Herston\">Herston</md-option> <md-option value=\"Bundaberg\">Bundaberg</md-option> <md-option value=\"PACE\">PACE</md-option> <md-option value=\"Mater\">Mater</md-option> </md-select> <div> <div ng-if=\"libraryForm.campus.$error['required']\" class=\"input-error-message\"> A campus must be selected. </div> </div> </md-input-container> </div> <div flex=\"initial\"> <!-- library description --> <md-input-container class=\"md-block input-text\" flex-gt-sm> <label>Description </label> <input name=\"desc\" ng-model=\"ctrl.Library.desc\"> </md-input-container> </div> <div flex=\"initial\"> <!-- library website URL --> <md-input-container class=\"md-block input-text\" flex-gt-sm> <label>URL</label> <input name=\"url\" ng-model=\"ctrl.Library.url\" ng-pattern=\"/^https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)$/\"> <div> <div ng-show=\"libraryForm.url.$viewValue&&libraryForm.url.$error['pattern']\" class=\"input-error-message\"> URL must starts with http:// or https:// and contains valid domain name. </div> </div> </md-input-container> </div> <div layout-gt-xs=\"row\" flex=\"initial\"> <!-- longitude --> <md-input-container class=\"md-block input-text\" flex=\"intial\"> <label>Longitude</label> <input ng-model=\"ctrl.Library.long\" name=\"long\" type=\"number\" min=\"-90\" max=\"90\"> <div> <div ng-show=\"libraryForm.long.$error['min']||libraryForm.long.$error['max']\" class=\"input-error-message\"> The value of Latitude should be between -90 and 90. </div> <div ng-show=\"libraryForm.long.$error['number']\" class=\"input-error-message\"> Invalid number format. </div> </div> </md-input-container> <!-- latitude --> <md-input-container class=\"md-block input-text\" flex=\"intial\"> <label>Latitude</label> <input ng-model=\"ctrl.Library.lat\" name=\"lat\" type=\"number\" min=\"-180\" max=\"180\"> <div> <div ng-show=\"libraryForm.lat.$error['min']||libraryForm.lat.$error['max']\" class=\"input-error-message\"> The value of Longitude should be between -180 and 180. </div> <div ng-show=\"libraryForm.lat.$error['pattern']\" class=\"input-error-message\"> Invalid number format. </div> </div> </md-input-container> </div> <!-- status for save/cancel progress --> <div style=\"display:flex; flex-direction:row; justify-content:center\" flex=\"initial\"> <div class=\"status-message\">{{ctrl.status}}</div> </div> <div style=\"display:flex; flex-direction:row; justify-content:center\" flex=\"initial\"> <!-- cancel button, navigate to library list --> <md-button class=\"md-warn md-raised create-cancel\" ng-click=\"ctrl.Cancel();\">Cancel</md-button> <!-- save button, disabled if form contains errors --> <md-button ng-disabled=\"ctrl.SaveDisabled || (libraryForm.$error|hasKeys)\" class=\"md-primary md-raised create-save\" ng-click=\"ctrl.Save();\">Save</md-button> </div> </div> </form> ";
        _this12.controller = NewLibController;
        _this12.controllerAs = 'ctrl';
        return _ret3 = _this12, _possibleConstructorReturn(_this12, _ret3);
    }

    return NewLibDirective;
}(ngstd.AngularDirective);

NewLibDirective.selector = 'newlib';

var TodayController = function () {
    function TodayController($scope) {
        _classCallCheck(this, TodayController);

        this.$scope = $scope;

        this.Weekday = Date.now();
    }

    _createClass(TodayController, [{
        key: 'setMode',
        value: function setMode(mode) {
            this.parent.displayMode = mode.toString();
        }
    }, {
        key: 'parent',
        get: function get() {
            return this.$scope.$parent['ctrl'];
        }
    }]);

    return TodayController;
}();

TodayController.$inject = ['$scope'];

var TodayDirective = function (_ngstd$AngularDirecti5) {
    _inherits(TodayDirective, _ngstd$AngularDirecti5);

    function TodayDirective() {
        var _ret4;

        _classCallCheck(this, TodayDirective);

        var _this13 = _possibleConstructorReturn(this, (TodayDirective.__proto__ || Object.getPrototypeOf(TodayDirective)).call(this));

        _this13.restrict = 'AE';
        _this13.template = " <div layout=\"column\"> <md-list flex> <div class=\"md-display-1\" layout=\"column\" layout-align=\"center center\">Libraries Information Today ({{ctrl.Weekday|date:\"EEEE\"}})</div> <md-input-container style=\"padding: 0; margin:12px 0 0 0\" class=\"md-block\" ng-hide=\"ctrl.isLoading\"> <label>Type Keyword to Filter Libraries</label> <input class=\"keyword-filter\" ng-model=\"keyword\"> </md-input-container> <div layout=\"row\" style=\"margin: -15px 0 0 0\" layout-wrap layout-margin=\"2\" layout-align=\"space-around\"> <div class=\"md-3-line list-item md-raised\" ng-repeat=\"item in $parent.ctrl.libraries|fieldsFilter:['name','abbr']:keyword\" layout=\"column\" layout-align=\"stretch stretch\" flex-xs=\"90\" flex-sm=\"90\" flex-md=\"40\" flex-lg=\"30\" flex-xl=\"20\"> <!-- library name --> <div class=\"lib-title\"> <md-button class=\"md-fab md-primary info-button\" ng-click=\"ctrl.setMode(item.lid);\" aria-label=\"{{item.name}}\"> <md-tooltip md-direction=\"top\" class=\"md-title\"> View Detailed Information </md-tooltip> <md-icon md-svg-src=\"/img/info.svg\"></md-icon> </md-button> <div class=\"md-title\" style=\"flex: 1 1 auto; color: white; padding: 0px 3px; display: flex; align-items: center; flex-direction: row; border-radius: 4px\">{{ item.name }}</div> </div> <!-- computer availability chart --> <div style=\"display: flex; padding:0px; flex: 0 0 56px; flex-direction: row; align-items: stretch\"> <md-button ng-style=\"item.isComputersAvailable?{'background-color':'green'}:{}\" class=\"md-fab md-primary info-button\" aria-label=\"Compute Availability info-button\" ng-disabled=\"!item.isComputersAvailable\"> <md-tooltip md-direction=\"top\" class=\"md-title\"> Computer Availability </md-tooltip> <md-icon md-svg-src=\"/img/computer.svg\"></md-icon> </md-button> <div class=\"md-raised\" style=\"flex: 1 1 auto; display: flex; align-items: center; flex-direction: column; align-items: flex-start; justify-content: space-around\" ng-if=\"item.isComputersAvailable\" hisback value=\"item.availablePercentage\" foreground=\"'#bfb'\" background=\"'#ddd'\"> <span>Computers: {{ item.totalAvailable }} out of {{ item.numberOfComputers }} available</span> <span>{{item.numberOfComputerRooms}} Computer {{(item.numberOfComputerRooms>1)?'Rooms':'Room'}}</span> </div> <div class=\"md-raised\" style=\"flex: 1 1 auto; display: flex; align-items: center; flex-direction: row\" ng-if=\"!item.isComputersAvailable\" hisback value=\"item.availablePercentage\" foreground=\"'#bfb'\" background=\"'#ddd'\">Computers: N/A</div> </div> <!-- open/close status --> <div style=\"display: flex; padding:0px; flex: 0 0 56px; flex-direction: row; align-items: stretch\"> <md-button ng-style=\"(item.numberOfOpenDepartments>0)?{'background-color':'#ff6a00'}:{'background-color':'#bbb'}\" class=\"md-fab md-primary info-button\" aria-label=\"Compute Availability\"> <md-tooltip md-direction=\"top\" class=\"md-title\"> {{(item.numberOfOpenDepartments>0)?'Currently Open':'Currently Closed'}} </md-tooltip> <md-icon md-svg-src=\"/img/study.svg\"></md-icon> </md-button> <div style=\"flex: 1 1 auto; display: flex; align-items: flex-start; flex-direction: column; justify-content: space-around; border-radius: 4px\"> <div style=\"font-size: 18px\" ng-if=\"item.numberOfOpenDepartments>0\">{{item.numberOfOpenDepartments}} out of {{item.departments.length}} {{item.departments.length>1?' Departments':' Department'}} Open</div> <div style=\"font-size: 18px\" ng-if=\"item.numberOfOpenDepartments==0\">Currently Closed</div> <div style=\"font-size: 18px\">{{item.renderedHours}}</div> </div> </div> </div> </div> </md-list> </div> ";
        _this13.controller = TodayController;
        _this13.controllerAs = 'ctrl';
        return _ret4 = _this13, _possibleConstructorReturn(_this13, _ret4);
    }

    return TodayDirective;
}(ngstd.AngularDirective);

TodayDirective.selector = 'today';

var StringExtension = function (_String) {
    _inherits(StringExtension, _String);

    function StringExtension() {
        _classCallCheck(this, StringExtension);

        return _possibleConstructorReturn(this, (StringExtension.__proto__ || Object.getPrototypeOf(StringExtension)).apply(this, arguments));
    }

    _createClass(StringExtension, [{
        key: 'format',
        value: function format() {
            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
            }

            return this.replace(/{\d+}/g, function (char) {
                var index = Number(char.substr(1, char.length - 2));
                return args[index].toString();
            });
        }
    }, {
        key: 'unescapeHTML',
        value: function unescapeHTML() {
            return this.replace(/&(gt|lt|amp|nbsp);/ig, function (hit) {
                switch (hit) {
                    case '&gt;':
                        return '>';
                    case '&lt;':
                        return '<';
                    case '&amp;':
                        return '&';
                    case '&nbsp;':
                        return ' ';
                }
            }).replace(/&#(\d+);/ig, function (hit) {
                return String.fromCharCode(Number(arguments.length <= 1 ? undefined : arguments[1]));
            });
        }
    }]);

    return StringExtension;
}(String);

String.prototype.format = StringExtension.prototype.format;
String.prototype.unescapeHTML = StringExtension.prototype.unescapeHTML;

var BackgroundHistogramDirective = function (_ngstd$AngularDirecti6) {
    _inherits(BackgroundHistogramDirective, _ngstd$AngularDirecti6);

    function BackgroundHistogramDirective() {
        _classCallCheck(this, BackgroundHistogramDirective);

        var _this15 = _possibleConstructorReturn(this, (BackgroundHistogramDirective.__proto__ || Object.getPrototypeOf(BackgroundHistogramDirective)).call(this));

        _this15.restrict = 'A';
        _this15.scope.value = '=?';
        _this15.scope.foreground = '=?';
        _this15.scope.background = '=?';
        _this15.link = function (scope, element, attr) {
            var render = function render() {
                var foreground = '#bFb';
                var background = '#aaa';
                var value = 0;
                if (typeof scope.foreground == 'string') foreground = scope.foreground;
                if (typeof scope.background == 'string') background = scope.background;
                if (typeof scope.value == 'number') value = scope.value;
                element.css('background', 'linear-gradient(to right, {0} 0%, {0} {2}%, {1} {2}%, {1} 100%)'.format(foreground, background, Math.round(value)));
            };
            scope.$watch('value', function () {
                return render();
            });
            scope.$watch('foreground', function () {
                return render();
            });
            scope.$watch('background', function () {
                return render();
            });
        };
        return _this15;
    }

    return BackgroundHistogramDirective;
}(ngstd.AngularDirective);

BackgroundHistogramDirective.selector = 'hisback';

var WeekController = function () {
    function WeekController($scope, $mdMedia) {
        _classCallCheck(this, WeekController);

        this.$scope = $scope;
        this.$mdMedia = $mdMedia;
        this.$inject = ['$scope', '$mdMedia'];
    }

    _createClass(WeekController, [{
        key: 'setMode',
        value: function setMode(mode) {
            this.parent.displayMode = mode.toString();
        }
    }, {
        key: 'parent',
        get: function get() {
            return this.$scope.$parent['ctrl'];
        }
    }]);

    return WeekController;
}();

var WeekDirective = function (_ngstd$AngularDirecti7) {
    _inherits(WeekDirective, _ngstd$AngularDirecti7);

    function WeekDirective() {
        var _ret5;

        _classCallCheck(this, WeekDirective);

        var _this16 = _possibleConstructorReturn(this, (WeekDirective.__proto__ || Object.getPrototypeOf(WeekDirective)).call(this));

        _this16.restrict = 'AE';
        _this16.template = " <div layout=\"column\" flex=\"initial\"> <md-list flex=\"initial\"> <!-- title --> <div class=\"md-display-1\" layout=\"column\" layout-align=\"center center\">Libraries Hours</div> <!-- keyword filter --> <md-input-container style=\"padding: 0; margin:12px 0 0 0\" class=\"md-block\" ng-hide=\"ctrl.isLoading\"> <label>Type Keyword to Filter Libraries</label> <input class=\"keyword-filter\" ng-model=\"keyword\"> </md-input-container> <!-- list of library --> <div layout=\"row\" style=\"margin: -15px 0 0 0\" layout-wrap layout-margin=\"2\" layout-align=\"center center\"> <div class=\"md-3-line table-item\" ng-repeat=\"item in $parent.ctrl.libraries|fieldsFilter:['name','abbr']:keyword\" layout=\"column\" layout-align=\"stretch stretch\" flex=\"100\" flex-gt-md=\"80\"> <!-- key information bar --> <div layout-gt-sm=\"row\" layout=\"column\" flex=\"initial\" style=\"display: flex; align-items: stretch; background-color: #45b; border-radius: 28px 28px 0px 0px\"> <!-- library name --> <div flex=\"33\" class=\"list-row\" layout=\"row\"> <md-button class=\"md-fab md-primary info-button\" ng-click=\"ctrl.setMode(item.lid);\" aria-label=\"{{item.name}}\"> <md-icon md-svg-src=\"/img/info.svg\"></md-icon> </md-button> <div class=\"md-title lib-title\" style=\"flex: 1 1 auto; color: white; padding: 0px 3px; display: flex; align-items: center; flex-direction: row; border-radius: 4px\">{{ item.name }}</div> </div> <!-- computer availability chart --> <div flex=\"33\" class=\"list-row\" layout=\"row\" style=\"background-color: white\"> <md-tooltip md-direction=\"top\" class=\"md-title\"> Computer Availability </md-tooltip> <md-button ng-style=\"item.isComputersAvailable?{'background-color':'green'}:{}\" class=\"md-fab md-primary info-button\" aria-label=\"Compute Availability\" ng-disabled=\"!item.isComputersAvailable\"> <md-icon md-svg-src=\"/img/computer.svg\"></md-icon> </md-button> <div class=\"md-raised\" style=\"flex: 1 1 auto; display: flex; align-items: center; flex-direction: column; align-items: flex-start; justify-content: space-around\" ng-if=\"item.isComputersAvailable\" hisback value=\"item.availablePercentage\" foreground=\"'#bfb'\" background=\"'#ddd'\"> <span>Computers: {{ item.totalAvailable }} out of {{ item.numberOfComputers }} available</span> <span>{{item.numberOfComputerRooms}} Computer {{(item.numberOfComputerRooms>1)?'Rooms':'Room'}}</span> </div> <div class=\"md-raised\" style=\"flex: 1 1 auto; display: flex; align-items: center; flex-direction: row\" ng-if=\"!item.isComputersAvailable\" hisback value=\"item.availablePercentage\" foreground=\"'#bfb'\" background=\"'#ddd'\">Computers: N/A</div> </div> <!-- open/close status --> <div flex=\"33\" class=\"list-row\" layout=\"row\" style=\"color: white\"> <md-button ng-style=\"(item.numberOfOpenDepartments>0)?{'background-color':'#ff6a00'}:{'background-color':'#bbb'}\" class=\"md-fab md-primary info-button\" aria-label=\"Compute Availability\"> <md-tooltip md-direction=\"top\" class=\"md-title\"> {{(item.numberOfOpenDepartments>0)?'Open':'Closed'}} </md-tooltip> <md-icon md-svg-src=\"/img/study.svg\"></md-icon> </md-button> <div style=\"flex: 1 1 auto; display: flex; align-items: flex-start; flex-direction: column; justify-content: space-around; border-radius: 4px\"> <div style=\"font-size: 18px\" ng-if=\"item.numberOfOpenDepartments>0\">{{item.numberOfOpenDepartments}} out of {{item.departments.length}} {{item.departments.length>1?' Departments':' Department'}} Open</div> <div style=\"font-size: 18px\" ng-if=\"item.numberOfOpenDepartments==0\">Currently Closed</div> <div style=\"font-size: 18px\">{{item.renderedHours}}</div> </div> </div> </div> <!-- list of date and weekday, shown when gt-sm, row layout --> <div style=\"flex: 0 0 56px; flex-direction: row; align-items: stretch; background-color: #555; color: white\" layout=\"row\" hide show-gt-sm> <div style=\"flex: 1 1 23%\" layout=\"column\" layout-align=\"center center\">Department</div> <div ng-repeat=\"day in item.departmentsWeek[0].weekHoursInfo\" layout=\"column\" layout-align=\"center center\" style=\"flex: 1 1 11%\" ng-style=\"{'background-color': ($index % 2==1)?'rgba(255,255,255,0)':'rgba(20,20,20,0.5)'}\"> <div> {{day.date}} </div> <div> {{day.weekday}} </div> </div> </div> <!-- opening hours for corresponding date and weekday, shown when gt-sm, row layout --> <div ng-repeat=\"department in item.departmentsWeek\" ng-style=\"{'background-color': ($index % 2==0)?'white':'lightgrey'}\" style=\"display: flex; flex: 0 0 56px; flex-direction: row; align-items: stretch\" ng-hide=\"!ctrl.$mdMedia('gt-sm')\"> <div style=\"flex: 1 1 23%\" layout=\"column\" layout-align=\"center center\">{{department.name}}</div> <div class=\"rendered-hours\" ng-repeat=\"day in department.weekHoursInfo\" layout=\"column\" layout-align=\"center center\" style=\"flex: 1 1 11%\" ng-style=\"{'background-color': ($index % 2==1)?'rgba(255,255,255,0)':'rgba(80,80,80,0.2)'}\"> {{day.rendered}} </div> </div> <!-- opening hours for date and weekday, shown when xs sm, column layout --> <div ng-repeat=\"department in item.departmentsWeek\" ng-style=\"{'background-color': ($index % 2==0)?'white':'lightgrey'}\" layout=\"row\" ng-hide=\"ctrl.$mdMedia('gt-sm')\"> <div flex=\"40\" layout=\"column\" layout-align=\"center center\">{{department.name}}</div> <div flex=\"60\" layout=\"column\"> <div flex=\"60\" layout=\"row\" class=\"list-row\" layout-align=\"center center\" ng-repeat=\"day in department.weekHoursInfo\" ng-style=\"{'background-color': ($index % 2==0)?'rgba(255,255,255,0)':'rgba(80,80,80,0.2)'}\"> <div flex=\"50\" layout=\"column\" layout-align=\"center center\"> <div style=\"height: 28px; min-height: 28px\"> {{day.date}} </div> <div style=\"height: 28px; min-height: 28px\"> {{day.weekday}} </div> </div> <div class=\"rendered-hours\" flex=\"50\" layout=\"column\" layout-align=\"center center\" style=\"flex: 1 1 11%; height: 56px; min-height: 56px\"> {{day.rendered}} </div> </div> </div> </div> </div> </div> </md-list> </div> ";
        _this16.controller = WeekController;
        _this16.controllerAs = 'ctrl';
        return _ret5 = _this16, _possibleConstructorReturn(_this16, _ret5);
    }

    return WeekDirective;
}(ngstd.AngularDirective);

WeekDirective.selector = 'week';

var UQLib;
(function (UQLib) {
    var uqlib = new ngstd.AngularModule('uqlib', ['ngMaterial']);

    uqlib.app.config(function ($mdThemingProvider) {
        $mdThemingProvider.theme('default').primaryPalette('indigo', {
            default: '600'
        }).accentPalette('teal').warnPalette('red').backgroundPalette('grey');
    });
    uqlib.includeContentDirective();

    uqlib.includeFilters(LibDataFilters);
    uqlib.addDirective(BackgroundHistogramDirective);
    uqlib.addDirective(NewLibDirective);
    uqlib.addDirective(TodayDirective);
    uqlib.addDirective(WeekDirective);
    uqlib.addDirective(DetailDirective);
    uqlib.addDirective(MainDirective);
    uqlib.includeLoaderController();
})(UQLib || (UQLib = {}));

var NumberUtil = function () {
    function NumberUtil() {
        _classCallCheck(this, NumberUtil);
    }

    _createClass(NumberUtil, null, [{
        key: 'isValidInteger',
        value: function isValidInteger(value) {
            return typeof value == 'number' && Number.isFinite(value) && Number.isInteger(value);
        }
    }]);

    return NumberUtil;
}();

var HttpProxy = function () {
    function HttpProxy($http, proxyLink) {
        _classCallCheck(this, HttpProxy);

        this.$http = $http;
        this.proxyLink = proxyLink;
        this.useProxy = false;
    }

    _createClass(HttpProxy, [{
        key: 'get',
        value: function get(link, config) {
            if (this.useProxy) {
                return this.getByProxy(link, config);
            } else {
                var error = void 0;
                try {
                    return this.$http.get(link, config);
                } catch (ex) {
                    console.warn('error when connecting to server, try proxy now.');
                    error = true;
                }
                if (error) {
                    this.useProxy = true;
                    return this.getByProxy(link, config);
                }
            }
        }
    }, {
        key: 'post',
        value: function post(link, data, config) {
            if (this.useProxy) {
                return this.postByProxy(link, data, config);
            } else {
                var error = void 0;
                try {
                    return this.$http.post(link, data, config);
                } catch (ex) {
                    console.log(ex);
                    error = true;
                }
                if (error) {
                    this.useProxy = true;
                    return this.postByProxy(link, data, config);
                }
            }
        }
    }, {
        key: 'getByProxy',
        value: function getByProxy(link, config) {
            var iproxy = {
                data: null,
                link: link,
                method: 'GET',
                config: config
            };
            return this.$http.post(this.proxyLink, iproxy);
        }
    }, {
        key: 'postByProxy',
        value: function postByProxy(link, data, config) {
            var iproxy = {
                data: data,
                link: link,
                method: 'POST',
                config: config
            };
            return this.$http.post(this.proxyLink, iproxy);
        }
    }]);

    return HttpProxy;
}();